pipeline {
    agent any 
     environment{
        KEY=credentials('TMDB_API_KEY')
        }
    stages{
        stage ("Bulding docker image"){
            steps{
                sh "docker build . --build-arg TMDB_V3_API_KEY=$KEY -t netflix"
            }
        }
        stage ("Pushing docker Image"){
            steps{
                withDockerRegistry(credentialsId: 'docker', url: 'https://index.docker.io/v1/') {
                sh ' docker tag netflix chaitanya305/netflix'
                sh ' docker push chaitanya305/netflix '
                }
            }  
        }
        stage ("deployement of Netflix"){
            steps{
                script{
                    sh "ls -lrt "
                    sh "pwd"
                    dir('netflix/netflix_k8s') {
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'K8S', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                            sh "kubectl apply -f netflix.yml"
                        }
                    }
                }    
            }
        }
        stage ("deployement of Monitoring pods"){
            steps{
                script{
                    dir('netflix') {
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'K8S', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                            sh "kubectl apply -f monitoring"
                        }
                    }
                }    
            }
        }
    }
    post {
        success {
            mail bcc: '', body: 'Build Completed Successfully.', cc: '', from: '', replyTo: '', subject: 'Build Completed Successfully.', to: 'chaitanyagolhar35@gmail.com'
        }
        failure {
            mail bcc: '', body: 'Build failed.', cc: '', from: '', replyTo: '', subject: 'Build Failed.', to: 'chaitanyagolhar35@gmail.com'
        }
    }
}

